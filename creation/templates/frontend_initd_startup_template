#!/bin/bash
# condor   This is the glideinWMS frontend startup script
# chkconfig: 35 90 30
# description: Starts and stops a glideinWMS frontend

        
# Emulate function library.
success() {
	echo -en "\\033[60G[\033[32mOK\033[0m]"
	return 0
}

failure() {
	echo -en "\\033[60G[\033[31mFAILED\033[0m]"
	return 1
}

[ -f /etc/sysconfig/gwms-frontend ] && . /etc/sysconfig/gwms-frontend
        
frontend_dir=%(frontend_dir)s
glideinWMS_dir=%(glideinWMS_dir)s
default_cfg_fpath=%(default_cfg_fpath)s

       
frontend_name=`awk '/^FrontendName /{print $2}' ${frontend_dir}/frontend.descript`
id_str="${frontend_name}"


        
start() {
        echo -n "Starting glideinWMS frontend $id_str: "
        nice -2 "$glideinWMS_dir/frontend/glideinFrontend.py" "$frontend_dir" 2>/dev/null 1>&2 </dev/null &
        sleep 5
        "$glideinWMS_dir/frontend/checkFrontend.py" "$frontend_dir"  2>/dev/null 1>&2 </dev/null && success || failure
        RETVAL=$?
        echo
}
        
stop() {
        echo -n "Shutting down glideinWMS frontend $id_str: "
        "$glideinWMS_dir/frontend/stopFrontend.py" "$frontend_dir" 2>/dev/null 1>&2 </dev/null && success || failure
        RETVAL=$?
        echo
}
        
restart() {
        stop
        if [ $RETVAL -ne 0 ]; then
          exit $RETVAL
        fi
        start
}

reconfig() {
        if [ -f "$2" ]; then
           has_arg=1
           echo "Using frontend config file arg: $2"
           cfg_loc=$2           
        else
           has_arg=0
           echo "Using default frontend config file: $default_cfg_fpath"
           cfg_loc=$default_cfg_fpath
        fi
        shift
        update_def_cfg="no"
        writeback="yes"
        fix_rrd=""

		for var in "$@"
           do
           case "$var" in
              yes | no) writeback="$var"
              ;;
              update_default_cfg) update_def_cfg="yes"
              ;;
              "-fix_rrd") fix_rrd="-fix_rrd"
              ;;
              *) if [ "$cfg_loc" != "$var" ]; then
                 echo "Unknown argument passed: $var"
                 echo $"Usage: frontend_startup {reconfig xml <update_default_cfg> <writeback yes|no>}"
                 exit 1
                 fi
	  		  ;;
			esac
		done
		if [ -n "$GLIDEIN_WRITEBACK" ]; then
			writeback="$GLIDEIN_WRITEBACK"
		fi

        "$glideinWMS_dir/frontend/checkFrontend.py" "$frontend_dir" >/dev/null 2>&1 </dev/null
        notrun=$?
        if [ $notrun -eq 0 ]; then
          stop
          if [ $RETVAL -ne 0 ]; then
            exit $RETVAL
          fi
        fi
        "$glideinWMS_dir/creation/reconfig_frontend" -force_name "$frontend_name" -writeback "$writeback" -update_scripts "no" -xml "$cfg_loc" -update_def_cfg "$update_def_cfg" $fix_rrd
        RETVAL=$?
        reconfig_failed=$?
        echo -n "Reconfiguring the frontend"
        test $reconfig_failed -eq 0 && success || failure
        echo
        if [ $notrun -eq 0 ]; then
          start
        fi
}
        
upgrade() {
        if [ -f "$1" ]; then
           has_arg=1
           echo "Using frontend config file arg: $1"
           cfg_loc=$1
        else
           has_arg=0
           echo "Using default frontend config file: $default_cfg_fpath"
           cfg_loc=$default_cfg_fpath
        fi
        "$glideinWMS_dir/frontend/checkFrontend.py" "$frontend_dir" >/dev/null 2>&1 </dev/null
        notrun=$?
        if [ $notrun -eq 0 ]; then
          stop
          if [ $RETVAL -ne 0 ]; then
            exit $RETVAL
          fi
        fi
        "$glideinWMS_dir/creation/reconfig_frontend" -force_name "$frontend_name" -writeback "yes" -update_scripts "yes" -xml "$cfg_loc"
        reconfig_failed=$?
        echo -n "Upgrading the frontend"
        test $reconfig_failed -eq 0 && success || failure
          RETVAL=$?
        echo
        if [ $notrun -eq 0 ]; then
          start
        fi
}

downtime() {
       if [ -z "$2" ]; then
           echo $"Usage: frontend_startup $1 \'frontend\'|\'entries\'|entry_name [delay]"
           exit 1
       fi
	 if [ "$1" == "down" ]; then
	   echo -n "Setting downtime for"
	 elif [ "$1" == "up" ]; then
	   echo -n "Removing downtime for"
	 else
	   echo -n "Infosys-based downtime management for"
	 fi
	 if [ "$2" == "frontend" ]; then
	   echo -n " frontend:"
       else
	   echo -n " entry $2:"
	 fi
	 "$glideinWMS_dir/frontend/manageFrontendDowntimes.py" "$frontend_dir" $2 $1 $3 2>/dev/null 1>&2 </dev/null && success || failure
	 RETVAL=$?
	 echo
}
        
case $1 in
        start)
                start
        ;;
        stop)
                stop
        ;;
        restart)
                restart
        ;;
        status)
               "$glideinWMS_dir/frontend/checkFrontend.py" "$frontend_dir"
	         RETVAL=$?
        ;;
        reconfig)
                reconfig "$@"
        ;;
        upgrade)
                upgrade $2
        ;;
        *)
        echo $"Usage: frontend_startup {start|stop|restart|status|reconfig|upgrade}"
        exit 1
esac

exit $RETVAL
