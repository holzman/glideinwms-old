#!/bin/bash
# condor   This is the glideinWMS factory startup script
# chkconfig: 35 90 30
# description: Starts and stops a glideinWMS factory

# Emulate function library.
success()
{
    echo -en "\\033[60G[\033[32mOK\033[0m]"
    return 0
}

failure()
{
    echo -en "\\033[60G[\033[31mFAILED\033[0m]"
    return 1
}

factory_dir=%(factory_dir)s
glideinWMS_dir=%(glideinWMS_dir)s
default_cfg_fpath=%(default_cfg_fpath)s


factory_name=`awk '/^FactoryName /{print $2}' ${factory_dir}/glidein.descript`
glidein_name=`awk '/^GlideinName /{print $2}' ${factory_dir}/glidein.descript`
id_str="$glidein_name@${factory_name}"


start()
{
    cwd=`pwd`
    cd $factory_dir
    echo -n "Starting glideinWMS factory $id_str: "
    nice -2 "$glideinWMS_dir/factory/glideFactory.py" "$factory_dir" 2>/dev/null 1>&2 </dev/null &
    sleep 5
    "$glideinWMS_dir/factory/checkFactory.py" "$factory_dir"  2>/dev/null 1>&2 </dev/null && success || failure
    RETVAL=$?
    if [ -n "$cwd" ]; then
        cd $cwd
    fi
    echo
}

stop()
{
    echo -n "Shutting down glideinWMS factory $id_str: "
    "$glideinWMS_dir/factory/stopFactory.py" "$factory_dir" 2>/dev/null 1>&2 </dev/null && success || failure
    RETVAL=$?
    echo
}

restart()
{
    stop
    if [ $RETVAL -ne 0 ]; then
        exit $RETVAL
    fi
    start
}

reconfig() {
        if [ -f "$2" ]; then
           has_arg=1
           echo "Using factory config file arg: $2"
           cfg_loc=$2
        else
           has_arg=0
           echo "Using default factory config file: $default_cfg_fpath"
           cfg_loc=$default_cfg_fpath
        fi
        shift
        update_def_cfg="no"
        writeback="yes"
        force_delete=""
        comment=""
        fix_rrd=""

        while (( "$#" )); do
           var=$1
           case "$var" in
              yes | no) writeback="$var"
                 ;;
              update_default_cfg) update_def_cfg="yes"
                 ;;
              "-force_delete") force_delete="-force_delete"
                ;;
              "-comment") comment=$2
                shift
                ;;
              "-fix_rrd") fix_rrd="-fix_rrd"
                 ;;
              *) if [ "$cfg_loc" != "$var" ]; then
                 echo "Unknown argument passed: $var"
                 echo $"Usage: factory_startup {reconfig xml <update_default_cfg> <writeback yes|no>}"
                 exit 1
                 fi
                 ;;
           esac
        done
        if [ -n "$GLIDEIN_WRITEBACK" ]; then
           writeback="$GLIDEIN_WRITEBACK"
        fi        
        
        "$glideinWMS_dir/factory/checkFactory.py" "$factory_dir" >/dev/null 2>&1 </dev/null
        notrun=$?
        if [ $notrun -eq 0 ]; then
          stop
          if [ $RETVAL -ne 0 ]; then
            exit $RETVAL
          fi
        fi
        
        "$glideinWMS_dir/creation/reconfig_glidein" -force_name "$glidein_name" -writeback "$writeback" -update_scripts "no" -xml "$cfg_loc" -update_def_cfg "$update_def_cfg" $force_delete $fix_rrd -comment "$comment"
        reconfig_failed=$?
        echo -n "Reconfiguring the factory"
        test $reconfig_failed -eq 0 && success || failure
        RETVAL=$?
        echo
        if [ $notrun -eq 0 ]; then
          if [ $reconfig_failed -ne 0 ];then
            echo ".. starting factory with old configuration file"
          fi
          start
          if [ $RETVAL -eq 0 ] && [ $reconfig_failed -eq 0 ]; then
            RETVAL=0
          else
            RETVAL=1
          fi
        fi
}


upgrade() {
        if [ -f "$1" ]; then
           has_arg=1
           echo "Using factory config file arg: $1"
           cfg_loc=$1
        else
           has_arg=0
           echo "Using default factory config file: $default_cfg_fpath"
           cfg_loc=$default_cfg_fpath
        fi
        "$glideinWMS_dir/factory/checkFactory.py" "$factory_dir" >/dev/null 2>&1 </dev/null
        notrun=$?
        if [ $notrun -eq 0 ]; then
          stop
          if [ $RETVAL -ne 0 ]; then
            exit $RETVAL
          fi
        fi
        "$glideinWMS_dir/creation/reconfig_glidein" -force_name "$glidein_name" -writeback "yes" -update_scripts "yes" -xml "$cfg_loc" 
        reconfig_failed=$?
        echo -n "Upgrading the factory"
        test $reconfig_failed -eq 0 && success || failure
        RETVAL=$?
        echo
        if [ $notrun -eq 0 ]; then
          if [ $reconfig_failed -ne 0 ];then
            echo ".. starting factory with old configuration file"
          fi
          start
          if [ $RETVAL -eq 0 ] && [ $reconfig_failed -eq 0 ]; then
            RETVAL=0
          else
            RETVAL=1
          fi
        fi
}

downtime()
{
    if [ -z "$3" ]; then
        echo $"Usage: factory_startup $1 -entry \'factory\'|\'entries\'|entry_name [-delay delay] [-frontend sec_name] [-security sec_class|\'All\'] [-comment comment]"
        exit 1
    fi

    if [ "$1" == "down" ]; then
        echo -n "Setting downtime..."
    elif [ "$1" == "up" ]; then
        echo -n "Removing downtime..."
    else
        echo -n "Infosys-based downtime management."
    fi

    "$glideinWMS_dir/factory/manageFactoryDowntimes.py" -cmd $1 -dir "$factory_dir" "$@" </dev/null && success || failure
    RETVAL=$?
    echo
}

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        $glideinWMS_dir/factory/checkFactory.py $factory_dir
        RETVAL=$?
        ;;
    info)
        shift
        $glideinWMS_dir/creation/info_glidein $@ $factory_dir/glideinWMS.xml
        RETVAL=$?
        ;;
    reconfig)
        reconfig "$@"
        ;;
    upgrade)
        upgrade $2
        ;;
    down)
        downtime down "$@"
        ;;
    up)
        downtime up "$@"
        ;;
    infosysdown)
        downtime ress+bdii entries "$@"
        ;;
    statusdown)
        if [ -z "$2" ]; then
            echo $"Usage: factory_startup $1 -entry \'factory\'|\'entries\'|entry_name [-delay delay]"
            exit 1
        fi
        "$glideinWMS_dir/factory/manageFactoryDowntimes.py" -cmd check -dir "$factory_dir" "$@"
        RETVAL=$?
        ;;
    *)
        echo $"Usage: factory_startup {start|stop|restart|status|info|reconfig|down|up|infosysdown|statusdown}"
        exit 1
esac

exit $RETVAL
