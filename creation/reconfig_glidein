#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#
# Description:
#  This program updates a glidein factory directory structure
#  based on a configuration file
#

import os
import sys
import logging
import os.path

STARTUP_DIR = sys.path[0]
sys.path.append(os.path.join(STARTUP_DIR,"../.."))

from glideinwms.creation.lib import cgWParams
from glideinwms.creation.lib import cgWDictFile
from glideinwms.creation.lib import cgWConsts
from glideinwms.creation.lib import cWConsts
from glideinwms.creation.lib import cgWCreate
from glideinwms.creation.lib import cgWParamDict
from glideinwms.factory import glideFactoryMonitorAggregator
from glideinwms.factory import glideFactoryConfig
from glideinwms.lib import logSupport

WEB_BASE_DIR=os.path.join(STARTUP_DIR,"web_base")
force_delete=False
fix_rrd = False

class UsageError(Exception): pass
class ReconfigError(Exception): pass

def logReconfig(msg):
    glideinDescript=glideFactoryConfig.GlideinDescript()
    # Set the Log directory 
    logSupport.log_dir = os.path.join(glideinDescript.data['LogDir'], "factory")
    # Configure factory process logging
    process_logs = eval(glideinDescript.data['ProcessLogs'])
    for plog in process_logs:
        if 'ADMIN' in plog['msg_types']:
            logSupport.add_processlog_handler("factoryadmin", 
                logSupport.log_dir, "DEBUG,INFO,WARN,ERR", 
                plog['extension'],
                int(float(plog['max_days'])),
                int(float(plog['min_days'])),
                int(float(plog['max_mbytes'])))
        else:
            logSupport.add_processlog_handler("factoryadmin", 
                logSupport.log_dir, plog['msg_types'], plog['extension'],
                int(float(plog['max_days'])),
                int(float(plog['min_days'])),
                int(float(plog['max_mbytes'])))
    logSupport.log = logging.getLogger("factoryadmin")
    logSupport.log.info("Reconfiguring factory: %s" % msg)

def main(params, old_params, update_scripts, update_def_cfg, comment=""):
    # load old files
    if not old_params is None:
        old_glidein_dicts_obj=cgWParamDict.glideinDicts(old_params)
        old_glidein_dicts_obj.load()

    # create dictionaries for new params
    glidein_dicts_obj = cgWParamDict.glideinDicts(params)
    glidein_dicts_obj.populate()

    # merge them together
    if not old_params is None:
        entries = glidein_dicts_obj.params.entries
        old_entries = old_glidein_dicts_obj.params.entries
        
        for entry in old_entries.keys():
            if entry not in entries.keys():
                print "WARNING: entry %s is not found in new xml!" % entry
                if not force_delete:
                    print "Aborting reconfig since this is just too scary."
                    print "Enable -force_delete if you really want to delete it."
                    sys.exit(1)
        
        glidein_dicts_obj.reuse(old_glidein_dicts_obj)
    
        # Make sure we preserve old schedd names
        for entry in entries.keys():
            if entry in old_entries.keys():
                entries[entry].data['schedd_name'] = old_entries[entry].schedd_name
    else:
        # If no old params exist, make sure to create the new directory, (no reuse)
        glidein_dicts_obj.create_dirs(fail_if_exists=False)

    # write to disk
    glidein_dicts_obj.save()
    glidein_dicts_obj.set_readonly(True)

    if update_scripts == 'yes':
        # copy the submit files
        cgWCreate.copy_exe(cgWConsts.STARTUP_FILE, glidein_dicts_obj.main_dicts.work_dir, params.src_dir, True)
        cgWCreate.copy_exe(cgWConsts.LOCAL_START_WRAPPER, glidein_dicts_obj.main_dicts.work_dir, params.src_dir, True)
        print '...Updated the glidein_startup.sh and local_start.sh scripts'

        # copy glidein_startup.sh to the stage area for cloud entries
        cgWCreate.copy_exe(cgWConsts.STARTUP_FILE, glidein_dicts_obj.main_dicts.stage_dir, params.src_dir, True)
        print "...Updated the glidein_startup.sh file in the staging area"

        # copy privsep helper executables
        cgWCreate.copy_exe(cgWConsts.UPDATE_PROXY_FILE, glidein_dicts_obj.main_dicts.work_dir, params.src_dir, True)

    if update_def_cfg == 'yes' or update_scripts == 'yes':
        # recreate the init.d startup file
        startup_fname = os.path.join(glidein_dicts_obj.main_dicts.work_dir, cgWConsts.INITD_STARTUP_FILE)
        factory_dir = glidein_dicts_obj.main_dicts.work_dir
        
        # Remove startup file if already exists
        if os.path.exists(os.path.join(factory_dir, startup_fname)):
            os.remove(os.path.join(factory_dir, startup_fname))

        cgWCreate.create_initd_startup(startup_fname,
                                       factory_dir,
                                       os.path.realpath(os.path.join(STARTUP_DIR, '..')),
                                       params.cfg_name)
        print "...Updated the factory_startup script"

        if update_def_cfg == 'yes':
            print "...Updated default config file location to: %s" % params.cfg_name

    # save config into file (with backup, since the old one already exists)
    cfgfile = os.path.join(glidein_dicts_obj.main_dicts.work_dir, cgWConsts.XML_CONFIG_FILE)

    # save config into file (with backup, since the old one already exists)
    # This is the version the factory is currently using for execution and is located in the main glidein dir.
    params.save_into_file_wbackup(cfgfile, set_ro=True)
    print "...Saved the current config file into the working dir"

    # make backup copy that does not get overwritten on further reconfig
    # This file has the additional hash extension and is located in the main glidein dir
    cfgfile = cWConsts.insert_timestr(cfgfile)
    params.save_into_file(cfgfile, set_ro=True)
    print "...Saved the backup config file into the working dir"

    print "...Reconfigured glidein '%s' is complete" % params.glidein_name
    print "...Active entries are:"
    for entry in glidein_dicts_obj.active_sub_list:
        print "     %s"%entry
    print "...Verifying rrd schema"
    if not glideFactoryMonitorAggregator.verifyRRD(fix_rrd):
        if not fix_rrd:
            print "Run with -fix_rrd option to update errors"
            print "WARNING: back up your existing rrds before auto-fixing rrds"
        sys.exit(1)
    print "...Submit files are in %s"%glidein_dicts_obj.main_dicts.work_dir
    if commit:
        logReconfig("Reconfig successful with options update_def_cfg='%s' update_scripts='%s' comment='%s'" % (update_def_cfg, update_scripts, comment))
############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    exit_code = 0
    usage = "reconfig_glidein { -force_name name -writeback yes|no -update_scripts yes|no -xml xml -update_def_cfg yes|no [-force_delete] | -help }"
    argv = sys.argv
    force_name = None
    writeback = 'no'
    update_scripts = 'no'
    xml = ''
    comment=''
    update_def_cfg = 'no'
    for i in range(len(argv)):
        if argv[i] == '-fix_rrd':
            fix_rrd = True
        if argv[i] == '-comment':
            comment = "("+argv[i + 1]+")"
        if argv[i] == '-force_name':
            force_name = argv[i + 1]
        if argv[i] == '-writeback':
            writeback = argv[i + 1]
        elif argv[i] == '-force_delete':
            force_delete = True
        if argv[i] == '-update_scripts':
            update_scripts = argv[i + 1]
        if argv[i] == '-xml':
            xml = argv[i + 1]
        if argv[i] == '-update_def_cfg':
            update_def_cfg = argv[i + 1]
        if argv[i] == '-help':
            print usage
            sys.exit(1)
        
    args = [argv[0], xml]

    try:
        params=cgWParams.GlideinParams(usage, WEB_BASE_DIR, args)

        if force_name != None:
            if params.glidein_name != force_name:
                raise UsageError("This is not a '%s' config file ('%s' found)" % (force_name, params.glidein_name))

        if not (writeback in ('yes', 'no')):
            raise UsageError("-writeback must be yes or no, found '%s'" % writeback)

        if not (update_def_cfg in ('yes', 'no')):
            raise UsageError("-update_def_cfg must be yes or no, found '%s'" % update_def_cfg)

        try:
            # This is the current running version, saved in the glidein work dir
            old_config_file = os.path.join(params.submit_dir, cgWConsts.XML_CONFIG_FILE)
            if os.path.exists(old_config_file):
                try:
                    old_params=cgWParams.GlideinParams(usage,WEB_BASE_DIR,[argv[0],old_config_file])
                except RuntimeError, e:
                    raise RuntimeError, "Failed to load %s" % old_config_file
            else:
                print "Warning: Cannot find %s"%old_config_file
                print "If this is the first reconfig, you can ignore this message."
                old_params=None
            
            main(params, old_params, update_scripts, update_def_cfg, comment=comment)
    
        except RuntimeError, e:
            raise ReconfigError(str(e))

        try:
            if writeback == 'yes':
                # Writes back the factory admin configurable file in the .cfg directory
                params.save_into_file_wbackup(params.cfg_name)
                print "...Overriding the factory config file in %s to the current configuration " % params.cfg_name
        except:
            raise ReconfigError("Writing back config file failed")

    except ReconfigError, re:
        print re
        exit_code = 1

    except UsageError, ue:
        print usage
        print ""
        print ue
        exit_code = 1

    except RuntimeError, e:
        print e
        exit_code = 1

    sys.exit(exit_code)
