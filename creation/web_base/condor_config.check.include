######################################################################
##
##  condor_config.check.include
##
##  Condor include file for testing purposes
##
######################################################################

WORK_DIR=$(LOCAL_DIR)

# No need to be nice... I got the slot
JOB_RENICE_INCREMENT = 0

# force a single CPU (the WN could have many)
NUM_CPUS = 1
SLOT_TYPE_1 = cpus=1, memory=100%, swap=100%, disk=100%
NUM_SLOTS_TYPE_1 = 1

HAS_MONITOR_VM=False
IS_MONITOR_VM = False
USES_MONITOR_STARTD = True

STARTD_ATTRS = $(STARTD_ATTRS), IS_MONITOR_VM, HAS_MONITOR_VM, USES_MONITOR_STARTD, Monitoring_Name

# don't start any jobs
START=False
WANT_HOLD=False
PREEMPT=False

IsOwner = False

# Max time a job is guaranteed to run in the glidein
# set it to several months... i.e. infinity
MaxJobRetirementTime=10000000
# How long does the job have after the startd enters retiring state
SHUTDOWN_GRACEFUL_TIMEOUT=$(GLIDEIN_Job_Max_Time)

# How long will it wait in an unclaimed state before exiting
STARTD_NOCLAIM_SHUTDOWN = $(GLIDEIN_Max_Idle)

# Set to shutdown if total idle exceeds max idle, or if the age
# exceeds the retire time (and is idle) or is over the max walltime (todie)

DS_TO_DIE = ((GLIDEIN_ToDie =!= UNDEFINED) && (CurrentTime > GLIDEIN_ToDie))
DS_IDLE_MAX = ((TotalTimeUnclaimedIdle =!= UNDEFINED) && \
	 (GLIDEIN_Max_Idle =!= UNDEFINED) && \
	 (TotalTimeUnclaimedIdle > GLIDEIN_Max_Idle))
DS_IDLE_RETIRE = ((GLIDEIN_ToRetire =!= UNDEFINED) && \
	 (CurrentTime > GLIDEIN_ToRetire ))
DS_IDLE_TAIL = ((TotalTimeUnclaimedIdle=!= UNDEFINED) && \
	 (TotalTimeClaimedBusy=!= UNDEFINED) && \
	 (GLIDEIN_Max_Tail=!= UNDEFINED) && \
	 (TotalTimeUnclaimedIdle > GLIDEIN_Max_Tail))
DS_IDLE = ( (Activity == "Idle") && \
	 ($(DS_IDLE_MAX) || $(DS_IDLE_RETIRE) || $(DS_IDLE_TAIL)) )

# The last condition below is intended to match partitionable slots that have
# no subslots.  Since the idle timer doesn't reset when resources
# are reclaimed, partitionable slots will get reaped sooner than
# non-partitionable.

STARTD.DAEMON_SHUTDOWN = $(DS_TO_DIE) || \
         ($(DS_IDLE) && ((PartitionableSlot =!= True) || (TotalSlots =?=1)))
#
# Shutdown the master if the startd exits.  Note that if
# STARTD_StartTime is zero, that the startd is not currently running.
#
MASTER.DAEMON_SHUTDOWN = (STARTD_StartTime =?= 0)

