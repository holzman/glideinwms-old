######################################################################
##
##  condor_config.dedicated_starter.include
##
##  Condor include file for main starter 
##
######################################################################

WORK_DIR=$(LOCAL_DIR)

# No need to be nice... I got the slot
JOB_RENICE_INCREMENT = 0

HAS_MONITOR_VM=True
IS_MONITOR_VM = False
USES_MONITOR_STARTD = True

STARTD_ATTRS = $(STARTD_ATTRS), IS_MONITOR_VM, HAS_MONITOR_VM, USES_MONITOR_STARTD, Monitoring_Name

GLIDEIN_REQUIREMENTS = ((GLIDEIN_ToRetire =?= UNDEFINED) || (CurrentTime < GLIDEIN_ToRetire))

START = ($(GLIDEIN_START_CONDITION)) && ($(GLIDEIN_REQUIREMENTS))
WANT_HOLD = ($(GLIDEIN_HOLD_CONDITION))
PREEMPT = (($(GLIDEIN_HOLD_CONDITION)) || ($(GLIDEIN_PREEMPT_CONDITION)))

IsOwner = False

# Max time a job is guaranteed to run in the glidein
# set it to several months... i.e. infinity
# (unless we are vacating a held job then should be zero)
MaxJobRetirementTime=ifthenelse(($(WANT_HOLD))=!=True,$(PREEMPT_GRACE_TIME),$(HOLD_GRACE_TIME))

# How long does the job have after the startd enters retiring state
SHUTDOWN_GRACEFUL_TIMEOUT=$(GLIDEIN_Graceful_Shutdown)

# How long will it wait in an unclaimed state before exiting
STARTD_NOCLAIM_SHUTDOWN = $(GLIDEIN_Max_Idle)

# Set to shutdown if total idle exceeds max idle, or if the age
# exceeds the retire time (and is idle) or is over the max walltime (todie)
DS_TO_DIE = ((GLIDEIN_ToDie =!= UNDEFINED) && (CurrentTime > GLIDEIN_ToDie))
DS_IDLE_MAX = ((TotalTimeUnclaimedIdle =!= UNDEFINED) && \
	 (GLIDEIN_Max_Idle =!= UNDEFINED) && \
	 (TotalTimeUnclaimedIdle > GLIDEIN_Max_Idle))
DS_IDLE_RETIRE = ((GLIDEIN_ToRetire =!= UNDEFINED) && \
	 (CurrentTime > GLIDEIN_ToRetire ))
DS_IDLE_TAIL = ((TotalTimeUnclaimedIdle=!= UNDEFINED) && \
	 (TotalTimeClaimedBusy=!= UNDEFINED) && \
	 (GLIDEIN_Max_Tail=!= UNDEFINED) && \
	 (TotalTimeUnclaimedIdle > GLIDEIN_Max_Tail))
DS_IDLE = ( (Activity == "Idle") && \
	 ($(DS_IDLE_MAX) || $(DS_IDLE_RETIRE) || $(DS_IDLE_TAIL)) )

# The last condition below is intended to match partitionable slots that have
# no subslots.  Since the idle timer doesn't reset when resources
# are reclaimed, partitionable slots will get reaped sooner than
# non-partitionable.

STARTD.DAEMON_SHUTDOWN = $(DS_TO_DIE) || \
         ($(DS_IDLE) && ((PartitionableSlot =!= True) || (TotalSlots =?=1)))

#
# Shutdown the master if the startd exits.  Note that if
# STARTD_StartTime is zero, that the startd is not currently running.
#
MASTER.DAEMON_SHUTDOWN = (STARTD_StartTime =?= 0)

