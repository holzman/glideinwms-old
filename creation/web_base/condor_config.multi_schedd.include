######################################################################
##
##  condor_config.multi_config.include
##
##  Condor include file for when the monitoring vm and the user vm 
##  run under the same  startd
##
######################################################################

WORK_DIR=$(LOCAL_DIR)

# No need to be nice... I got the slot
JOB_RENICE_INCREMENT = 0

NUM_CPUS = $(GLIDEIN_CPUS)+1
SLOT_TYPE_1 = cpus=1, memory=1%, swap=1%, disk=1%
NUM_SLOTS_TYPE_1 = 1
SLOT_TYPE_2 = cpus=$(GLIDEIN_CPUS), memory=99%, swap=99%, disk=99%
NUM_SLOTS_TYPE_2 = 1
SLOT_TYPE_2_PARTITIONABLE = $(GLIDEIN_Is_Partitionable)

STARTD_RESOURCE_PREFIX = vm

# Allow cross-VM expressions
STARTD_VM_EXPRS = RemoteUser, Name, GlobalJobId

HAS_MONITOR_VM=True
USES_MONITOR_STARTD=False

VM2_Monitoring_Name = VM1_Name
# use plural names, since there may be more than one if multiple job VMs
VM1_Monitored_Names = VM2_Name

STARTD_ATTRS = $(STARTD_ATTRS), IS_MONITOR_VM, HAS_MONITOR_VM,USES_MONITOR_STARTD
VM1_STARTD_ATTRS = Monitored_Names
VM2_STARTD_ATTRS = Monitoring_Name

GLIDEIN_REQUIREMENTS = ((GLIDEIN_ToRetire =?= UNDEFINED) || (CurrentTime < GLIDEIN_ToRetire ))

#Since condor 6.9.3, VirtualMachineID has been deprecated
# and replaced with SlotID
SLOT_1 = ((VirtualMachineID =?= 1) || (SlotID =?= 1)) 
SLOT_2 = ((VirtualMachineID =?= 2) || (SlotID =?= 2)) 
SLOT_2_RETIRED = ($(SLOT_1))&&((Activity=="Idle") && (GLIDEIN_ToRetire =!= UNDEFINED) && (CurrentTime > GLIDEIN_ToRetire )) 


IS_MONITOR_VM = ($(SLOT_1))
VM1_START_CONDITION = ((GLIDEIN_Is_Monitor=?=True) || (JOB_Is_Monitor=?=True))
VM2_START_CONDITION = ($(GLIDEIN_START_CONDITION)) && ($(GLIDEIN_REQUIREMENTS))
START = (($(SLOT_1)) && ($(VM1_START_CONDITION))) || (($(SLOT_2)) && ($(VM2_START_CONDITION)))

WANT_HOLD = (($(SLOT_2)) && ($(GLIDEIN_HOLD_CONDITION)))
PREEMPT = (($(SLOT_2)) && (($(GLIDEIN_HOLD_CONDITION)) || ($(GLIDEIN_PREEMPT_CONDITION))))


IsOwner = ($(SLOT_1)) && (START =?= False)

# Max time a job is guaranteed to run in the glidein
# set it to several months... i.e. infinity
# (unless we are vacating a held job then should be zero)
MaxJobRetirementTime=ifthenelse(($(WANT_HOLD))=!=True,$(PREEMPT_GRACE_TIME),$(HOLD_GRACE_TIME))

# How long does the job have after the startd enters retiring state
SHUTDOWN_GRACEFUL_TIMEOUT=$(GLIDEIN_Job_Max_Time)

# How long will it wait in an unclaimed state before exiting
STARTD_NOCLAIM_SHUTDOWN = $(GLIDEIN_Max_Idle)

# Set to shutdown if total idle exceeds max idle, or if the age
# exceeds the retire time or the max walltime
STARTD.DAEMON_SHUTDOWN = ((GLIDEIN_ToDie =!= UNDEFINED) && (CurrentTime > GLIDEIN_ToDie )) || ($(SLOT_2_RETIRED) )


#
# Shutdown the master if the startd exits.  Note that if
# STARTD_StartTime is zero, that the startd is not currently running.
#
MASTER.DAEMON_SHUTDOWN = (STARTD_StartTime =?= 0) 


