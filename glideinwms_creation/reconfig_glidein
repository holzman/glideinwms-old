#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#   $Id: reconfig_glidein,v 1.22.10.3 2010/09/24 15:30:36 parag Exp $
#
# Description:
#  This program updates a glidein factory directory structure
#  based on a configuration file
#

import os
import sys

import glideinwms_creation.cgWParams
import glideinwms_creation.cgWConsts
import glideinwms_creation.cWConsts
import glideinwms_creation.cgWParamDict


################################################################################

def main(params, old_params):
    # load old files
    old_glidein_dicts_obj = glideinwms_creation.cgWParamDict.glideinDicts(old_params)
    old_glidein_dicts_obj.load()

    # create dictionaries for new params
    glidein_dicts_obj = glideinwms_creation.cgWParamDict.glideinDicts(params)
    glidein_dicts_obj.populate()

    # merge them together
    glidein_dicts_obj.reuse(old_glidein_dicts_obj)

    # write to disk
    glidein_dicts_obj.save()
    glidein_dicts_obj.set_readonly(True)

    # save config into file (with backup, since the old one already exists)
    cfgfile = os.path.join(glidein_dicts_obj.main_dicts.work_dir, glideinwms_creation.cgWConsts.XML_CONFIG_FILE)
    params.save_into_file_wbackup(cfgfile, set_ro=True)
    # make two copies, the second one should have a unique name, so it does not get overwritten on further reconfig
    cfgfile = glideinwms_creation.cWConsts.insert_timestr(cfgfile)
    params.save_into_file(cfgfile, set_ro=True)

    print "Reconfigured glidein '%s'" % params.glidein_name
    print "Active entries are:"
    for entry in glidein_dicts_obj.active_sub_list:
        print "  %s" % entry
    print "Submit files are in %s" % glidein_dicts_obj.main_dicts.work_dir


############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    usage_prefix = "reconfig_glidein [-force_name name] [-writeback yes|no] [-web_base path]"
    argv = sys.argv
    force_name = None
    writeback = 'yes'
    web_base = sys.path[0] 

    for i in range(len(argv)):
        if argv[i] == '-force_name':
            force_name = argv[i + 1]
        if argv[i] == '-writeback':
            writeback = argv[i + 1]
        if argv[i] == '-web_base':
            web_base = argv[i + 1]
        if argv[i] == '-help':
            print usage_prefix
            sys.exit(1)


    try:
        params = glideinwms_creation.cgWParams.GlideinParams(usage_prefix, web_base, argv)
    except RuntimeError, e:
        print e
        sys.exit(1)

    if force_name != None:
        if params.glidein_name != force_name:
            print params.usage()
            print ""
            print "This is not a '%s' config file ('%s' found)" % (force_name, params.glidein_name)
            sys.exit(1)

    if not (writeback in ('yes', 'no')):
        print params.usage()
        print ""
        print "-writeback must be yes or no, found '%s'" % writeback
        sys.exit(1)

    try:
        old_config_file = os.path.join(params.submit_dir, glideinwms_creation.cgWConsts.XML_CONFIG_FILE)
        if os.path.exists(old_config_file):
            try:
                old_params = glideinwms_creation.cgWParams.GlideinParams(usage_prefix, web_base, [argv[0], old_config_file])
            except RuntimeError, e:
                raise RuntimeError, "Failed to load %s" % old_config_file
        else:
            raise RuntimeError, "Cannot find %s" % old_config_file
        main(params, old_params)
    except RuntimeError, e:
        print params.usage()
        print ""
        print e
        sys.exit(1)

    try:
        if writeback == 'yes':
            params.save_into_file_wbackup(params.cfg_name)
    except:
        print "Writing back config file failed"
        sys.exit(1)


