#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#
# Description:
#  This program updates a frontend directory structure
#  based on a configuration file
#

import os
import sys

import glideinwms_creation.cWConsts
import glideinwms_creation.cvWParams
import glideinwms_creation.cvWConsts
import glideinwms_creation.cvWCreate
import glideinwms_creation.cvWParamDict

################################################################################

def main(params, old_params, update_scripts, web_base):
    # create dictionaries for new params
    frontend_dicts_obj = glideinwms_creation.cvWParamDict.frontendDicts(params)
    frontend_dicts_obj.populate()

    if not (old_params is None):
        # load old files
        old_frontend_dicts_obj = glideinwms_creation.cvWParamDict.frontendDicts(old_params)
        old_frontend_dicts_obj.load()
        # merge them together
        frontend_dicts_obj.reuse(old_frontend_dicts_obj)

    # write to disk
    frontend_dicts_obj.save()
    frontend_dicts_obj.set_readonly(True)

    if update_scripts == 'yes':
        # recreate the init.d startup file
        startup_fname = os.path.join(frontend_dicts_obj.main_dicts.work_dir, glideinwms_creation.cvWConsts.INITD_STARTUP_FILE)
        frontend_dir = frontend_dicts_obj.main_dicts.work_dir

        # Remove startup file if already exists
        if os.path.exists(os.path.join(frontend_dir, startup_fname)):
            os.remove(os.path.join(frontend_dir, startup_fname))

        glideinwms_creation.cvWCreate.create_initd_startup(startup_fname, frontend_dir, os.path.realpath(os.path.join(web_base, '../..')))

    cfgfile = os.path.join(frontend_dicts_obj.main_dicts.work_dir, glideinwms_creation.cvWConsts.XML_CONFIG_FILE)

    # save config into file (with backup, since the old one already exists)
    # This is the current working version of the frontend in the frontend instance dir
    params.save_into_file_wbackup(cfgfile, set_ro=True)

    # make backup copy that does not get overwritten on further reconfig
    # This file is has a hash on the extension and is located in the frontend instance dir
    cfgfile = glideinwms_creation.cWConsts.insert_timestr(cfgfile)
    params.save_into_file(cfgfile, set_ro=True)

    print "Reconfigured frontend '%s'" % params.frontend_name
    print "Active entries are:"
    for entry in frontend_dicts_obj.active_sub_list:
        print "  %s" % entry
    print "Work files are in %s" % frontend_dicts_obj.main_dicts.work_dir


############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    usage = "{ -force_name name -writeback yes|no -update_scripts yes|no -xml xml -merge yes|no | -help }"
    argv = sys.argv
    force_name = None
    writeback = 'no'
    update_scripts = 'no'
    merge = 'no'
    xml = ''
    web_base = sys.path[0]

    for i in range(len(argv)):
        if argv[i] == '-force_name':
            force_name = argv[i + 1]
        if argv[i] == '-writeback':
            writeback = argv[i + 1]
        if argv[i] == '-update_scripts':
            update_scripts = argv[i + 1]
        if argv[i] == '-xml':
            xml = argv[i + 1]
        if argv[i] == '-merge':
            merge = str(argv[i + 1]).lower()
        if argv[i] == '-web_base':
            web_base = argv[i + 1]
        if argv[i] == '-help':
            print usage
            sys.exit(1)

    # AT - if this is packaged in FHS format, then we need to point to the proper location for web_base
    if web_base == "/usr/bin":
        web_base = "/usr/share/glideinwms"

    args = [argv[0], xml]

    try:
        #cvWParams.VOFrontendParams(usage, source directory, args)
        params = glideinwms_creation.cvWParams.VOFrontendParams(usage, web_base, args)
    except RuntimeError, e:
        print e
        sys.exit(1)

    if force_name != None:
        if params.frontend_name != force_name:
            print usage
            print ""
            print "This is not a '%s' config file ('%s' found)" % (force_name, params.frontend_name)
            sys.exit(1)

    if not (writeback in ('yes', 'no')):
        print usage
        print ""
        print "-writeback must be yes or no, found '%s'" % writeback
        sys.exit(1)

    try:
        if merge == 'yes':
            old_config_file = os.path.join(params.work_dir, glideinwms_creation.cvWConsts.XML_CONFIG_FILE)
            if os.path.exists(old_config_file):
                try:
                    old_params = glideinwms_creation.cvWParams.VOFrontendParams(usage, web_base, [argv[0], old_config_file])
                except RuntimeError, e:
                    raise RuntimeError, "Failed to load %s" % old_config_file
            else:
                raise RuntimeError, "Cannot find %s" % old_config_file
        else:
            old_params = None
        main(params, old_params, update_scripts, web_base)

    except RuntimeError, e:
        print usage
        print ""
        print e
        sys.exit(1)

    try:
        if writeback == 'yes':
            # Only writeback the config in the .cfg directly if explicitly asked to
            params.save_into_file_wbackup(params.cfg_name)
    except:
        print "Writing back config file failed"
        sys.exit(1)


