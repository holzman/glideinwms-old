#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#   $Id: glidecondor_addDN,v 1.1.2.3 2010/09/24 15:30:36 parag Exp $
#
# Description:
#   This tool adds a DN to the Condor security configuration
#
# Author:
#   Igor Sfiligoi @UCSD (Apr 2010)
#
# Part of the glideinWMS package
#

import sys
import os
import stat
import time
import re

from glideinwms_libs import condorExe

def usage():
    print "Usage:"
    print " glidecondor_addDN [-daemon comment] DN user"
    return

def parse_args(args):
    daemon_comment = None
    if len(args) < 2:
        usage()
        sys.exit(1)

    if (args[0] == '-help') or (args[0] == '-h'):
        usage()
        sys.exit(1)

    if args[0] == '-daemon':
        daemon_comment = args[1]
        if len(daemon_comment) < 10:
            print "Daemon comment must be at least 10 characters long"
            sys.exit(1)
        args = args[2:]

    if len(args) != 2:
        usage()
        sys.exit(1)
    dn = args[0]
    user = args[1]
    return {'is_daemon_dn':(daemon_comment != None), 'daemon_comment':daemon_comment, 'dn':dn, 'user':user}

def check_config(fname):
    if not os.path.isfile(fname):
        raise IOError, "Config file '%s' not found!" % fname

    if not os.access(fname, os.R_OK | os.W_OK):
        raise IOError, "Config file '%s' not writable!" % fname

    return # file seems OK

def update_mapfile(mapfile, dn, user):
    mapmode = os.stat(mapfile)[stat.ST_MODE]
    fd = open(mapfile, 'r')
    lines = fd.readlines()
    fd.close()

    if len(lines) < 3:
        # must have at least the GSI condor, GSI anon and FS anon
        print "File '%s' is not a condor mapfile; too short!" % mapfile
        sys.exit(3)

    if lines[0][:5] != 'GSI "':
        print "File '%s' is not a condor mapfile; first line is not a valid GSI mapping!" % mapfile
        sys.exit(3)

    # append GSI DN user
    # after the last line of that kind
    found = False
    for i in range(1, len(lines)):
        line = lines[i]
        if line[:5] != 'GSI "':
            lines.insert(i, 'GSI "^%s$" %s\n' % (re.escape(dn), user))
            found = True
            break
    if not found:
        print "File '%s' is not valid a condor mapfile; only plain GSI mappings found!" % mapfile
        sys.exit(3)

    # will overwrite the mapfile
    # but create a tmpfile first, so it is semi-atomic
    tmpfile = "%s.new" % mapfile
    if os.path.isfile(tmpfile):
        os.unlink(tmpfile)

    fd = open(tmpfile, 'w')
    fd.writelines(lines)
    fd.close()
    os.chmod(tmpfile, mapmode)

    bakfile = "%s~" % mapfile
    if os.path.isfile(bakfile):
        os.unlink(bakfile)
    os.rename(mapfile, bakfile)
    os.rename(tmpfile, mapfile)

    return

def update_config(config_file, dn, user, comment):
    # just append at the end of the file
    fd = open(config_file, 'a')
    fd.write("\n# New daemon DN added on %s\n" % time.ctime())
    fd.write("# Comment: %s\n" % comment)
    fd.write("# The following DN will map to %s\n" % user)
    fd.write("GSI_DAEMON_NAME=$(GSI_DAEMON_NAME),%s\n" % dn)
    fd.close()

    return

def main(args):
    # parse the arguments, so we know what the user want
    params = parse_args(args)

    # make sure we can access the files to be changed
    try:
        condor_mapfile = os.path.join(condorExe.condor_bin_path, "../certs/condor_mapfile")

        check_config(condor_mapfile)
        if params['is_daemon_dn']:
            condor_config = os.path.join(condorExe.condor_bin_path, "../etc/condor_config.local")
            try:
                check_config(condor_config)
            except IOError, e1:
                # will use this if the other is not available
                condor_config = os.path.join(condorExe.condor_bin_path, "../etc/condor_config")
                try:
                    check_config(condor_config)
                except IOError, e2:
                    raise IOError, "%s %s" % (e1, e2)
    except IOError, e:
        print e
        sys.exit(2)

    #now do the changes
    update_mapfile(condor_mapfile, params['dn'], params['user'])
    if params['is_daemon_dn']:
        update_config(condor_config, params['dn'], params['user'], params['daemon_comment'])

    print "Configuration files changed."
    print "Remember to reconfig the affected Condor daemons."
    print

    return 0

if __name__ == '__main__':
    main(sys.argv[1:])

