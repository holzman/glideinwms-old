#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#   $Id: create_glidein,v 1.144.6.3 2010/09/24 15:30:36 parag Exp $
#
# Description:
#  This program creates a glidein factory directory structure
#  based on a configuration file
#

import os
import sys
import string
import traceback

import glideinwms_creation.cgWParams
import glideinwms_creation.cgWConsts
import glideinwms_creation.cWConsts
import glideinwms_creation.cgWCreate
import glideinwms_creation.cgWParamDict


################################################################################

def main(params, web_base):
    #print params.__dict__
    glidein_dicts_obj = glideinwms_creation.cgWParamDict.glideinDicts(params)
    glidein_dicts_obj.populate()

    glidein_dicts_obj.create_dirs()
    try:
        # save files in dictionaries
        glidein_dicts_obj.save()
        glidein_dicts_obj.set_readonly(True)

        # copy the submit files
        glideinwms_creation.cgWCreate.copy_exe(glideinwms_creation.cgWConsts.STARTUP_FILE, glidein_dicts_obj.main_dicts.work_dir, params.src_dir)
        glideinwms_creation.cgWCreate.copy_exe(glideinwms_creation.cgWConsts.SUBMIT_WRAPPER, glidein_dicts_obj.main_dicts.work_dir, params.src_dir)
        glideinwms_creation.cgWCreate.copy_exe(glideinwms_creation.cgWConsts.LOCAL_START_WRAPPER, glidein_dicts_obj.main_dicts.work_dir, params.src_dir)

        # copy privsep helper executables
        glideinwms_creation.cgWCreate.copy_exe(glideinwms_creation.cgWConsts.UPDATE_PROXY_FILE, glidein_dicts_obj.main_dicts.work_dir, params.src_dir)

        # save config into file
        cfgfile = os.path.join(glidein_dicts_obj.main_dicts.work_dir, glideinwms_creation.cgWConsts.XML_CONFIG_FILE)
        params.save_into_file(cfgfile, set_ro=True)
        # make two copies, the second one should have a unique name, so it does not get overwritten on reconfig
        cfgfile = glideinwms_creation.cWConsts.insert_timestr(cfgfile)
        params.save_into_file(cfgfile, set_ro=True)

        # create the init.d starup file
        glideinwms_creation.cgWCreate.create_initd_startup(os.path.join(glidein_dicts_obj.main_dicts.work_dir, 
                                       glideinwms_creation.cgWConsts.INITD_STARTUP_FILE),
                                       glidein_dicts_obj.main_dicts.work_dir,
                                       os.path.realpath(os.path.join(web_base, '../..')))
    except:
        glidein_dicts_obj.delete_dirs()
        raise

    print "Created glidein '%s'" % params.glidein_name
    print "Active entries are:"
    for entry in glidein_dicts_obj.active_sub_list:
        print "  %s" % entry
    print "Submit files can be found in %s" % glidein_dicts_obj.main_dicts.work_dir
    print "Log files can be found in %s" % glidein_dicts_obj.main_dicts.log_dir
    print "Support files are in %s" % glidein_dicts_obj.main_dicts.stage_dir
    print "Monitoring files are in %s" % glidein_dicts_obj.main_dicts.monitor_dir


############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    usage_prefix = "create_glidein [-writeback yes|no] [-debug]"
    argv = sys.argv
    writeback = 'yes'
    debug = False
    web_base = sys.path[0]

    for i in range(len(argv)):
        if argv[i] == '-writeback':
            writeback = argv[i + 1]
        if argv[i] == '-debug':
            debug = True
        if argv[i] == '-web_base':
            web_base = argv[i + 1]
        if argv[i] == '-help':
            print usage_prefix
            sys.exit(1)

    # AT - if this is packaged in FHS format, then we need to point to the proper location for web_base
    if web_base == "/usr/bin":
        web_base = "/usr/share/glideinwms"

    try:
        params = glideinwms_creation.cgWParams.GlideinParams(usage_prefix, web_base, argv)
    except RuntimeError, e:
        if debug:
            tb = traceback.format_exception(sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2])
            print string.join(tb, '\n')
        print e
        sys.exit(1)

    if not (writeback in ('yes', 'no')):
        print params.usage()
        print ""
        print "-writeback must be yes or no, found '%s'" % writeback
        sys.exit(1)

    try:
        main(params)
    except RuntimeError, e:
        if debug:
            tb = traceback.format_exception(sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2])
            print string.join(tb, '\n')
        print params.usage()
        print ""
        print e
        sys.exit(1)

    try:
        if writeback == 'yes':
            params.save_into_file_wbackup(params.cfg_name)
    except:
        if debug:
            tb = traceback.format_exception(sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2])
            print string.join(tb, '\n')
        print "Writing back config file failed"
        sys.exit(1)

